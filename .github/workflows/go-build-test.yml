name: Go CI

on:
  push:
    tags: 
      - 'v[0-9]+.[0-9]+.[0-9]+*'
    branches:
      - '**'
  pull_request:
    branches: [ master ]

jobs:

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Setup Golang caches
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-golang${{ inputs.cache-key-suffix }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-golang${{ inputs.cache-key-suffix }}-
    - name: Test

      run: |
        mkdir frontend/dist
        touch frontend/dist/test
        touch api/generated-swagger.yml
        go test -v ./...
        rm frontend/dist/test
    - name: Fetch Go-Swagger
      run: |
        download_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \
        jq -r '.assets[] | select(.name | contains("'"$(uname | tr '[:upper:]' '[:lower:]')"'_amd64")) | .browser_download_url')
        curl -o /usr/local/bin/swagger -L'#' "$download_url"
        chmod +x /usr/local/bin/swagger
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(cd frontend && yarn config get cacheFolder)"

    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Yarn (frontend)
      run: cd frontend && yarn
    - name: Generate
      run: go generate -v ./...
    - name: Build frontend
      run: cd frontend && yarn build
    - name: Build server
      run: make build
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      if: startsWith( github.ref, 'refs/tags/v')
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Docker push
      if: startsWith( github.ref, 'refs/tags/v')
      run: |
        docker build -t "runardocker/gobyoall:latest" -t "runardocker/gobyoall:$(git describe --tag)"  .
        docker push "runardocker/gobyoall:latest"
        docker push "runardocker/gobyoall:$(git describe --tag)"

        docker build -t "runardocker/gobyoall:debug-latest" -t "runardocker/gobyoall:debug-$(git describe --tag)" -f Dockerfile.debug  .
        docker push "runardocker/gobyoall:debug-latest"
        docker push "runardocker/gobyoall:debug-$(git describe --tag)"
    - uses: "marvinpinto/action-automatic-releases@latest"
      name: "Release version"
      if: startsWith( github.ref, 'refs/tags/v')
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        files: |
          README.md
          dist/*
          api/generated-swagger.yml
          *sample*
    - uses: "marvinpinto/action-automatic-releases@latest"
      name: "Release latest"
      if: startsWith( github.ref, 'refs/tags/v')
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        files: |
          README.md
          dist/*
          api/generated-swagger.yml
          *sample*
     
    

