name: Go CI

on:
  push:
    tags: 
      - 'v[1-9]+.[0-9]+.[0-9]+*'
    branches: 
      - '**'
  pull_request:
    branches: [ master ]

jobs:

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(cd frontend && yarn config get cacheFolder)"

    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Fetch Go-Swagger
      run: |
        download_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \
        jq -r '.assets[] | select(.name | contains("'"$(uname | tr '[:upper:]' '[:lower:]')"'_amd64")) | .browser_download_url')
        curl -o /usr/local/bin/swagger -L'#' "$download_url"
        chmod +x /usr/local/bin/swagger
    - name: Yarn (frontend)
      run: cd frontend && yarn
    - name: Generate
      run: go generate -v ./...
    - name: Build frontend
      run: cd frontend && yarn build
    - name: Test
      run: go test -v ./...
    - name: Build
      run: make build
    - uses: "marvinpinto/action-automatic-releases@latest"
      if: startsWith( github.ref, 'refs/tags/v')
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        files: |
          README.md
          dist/*
    

